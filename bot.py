"""
This is a echo bot.
It echoes any incoming text messages.
"""

import asyncio
import asyncpg
import logging
import httpx
import pprint
import time
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentTypes

API_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
PAYMENTS_PROVIDER_TOKEN = os.environ['PAYMENTS_PROVIDER_TOKEN']
DATABASE_URL = os.environ['DATABASE_URL']
pool = None

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

update_time = 0

# Setup prices
prices = [
    types.LabeledPrice(label='–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü', amount=10000),
]


async def update_status(alert, status, chat_id, error=None):
    db = await asyncpg.connect(DATABASE_URL)
    await db.execute('''UPDATE ALERTS SET status=$1 WHERE id=$2''', *[status, alert[0], ])
    if error:
        await db.execute('''UPDATE ALERTS SET latest_error=$1 WHERE id=$2''', *[str(error).replace('\n', ' '), alert[0], ])
    await db.commit()
    await db.close()
    if alert[5] != status and 'HTTP_ERROR' not in status and 'HTTP_ERROR' not in alert[5]:
        await bot.send_message(chat_id, '‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {} —Å–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞ {}'.format(alert[2], status))


async def update_alerts():
    global update_time
    t1 = time.time()
    client = httpx.AsyncClient()
    db = await asyncpg.connect(DATABASE_URL)
    alerts = await db.fetch('''SELECT id, chat_id, name, address, template, status FROM ALERTS''')
    await db.close()
    req_coros = []
    for alert in alerts:
        req_coros.append(client.get(alert[3], timeout=5))

    req_coros = await asyncio.gather(*req_coros, return_exceptions=True)
    alert_id = 0
    for coro in req_coros:
        try:
            resp = coro
            if resp.status_code != 200:
                await update_status(alerts[alert_id], 'üõ†HTTP_ERROR:{}üõ†'.format(resp.status_code), alerts[alert_id][1], error=resp.text)
            if alerts[alert_id][4] in resp.text:
                await update_status(alerts[alert_id], '‚úÖTEMPLATE_FOUND‚úÖ', alerts[alert_id][1])
            else:
                await update_status(alerts[alert_id], 'üö´TEMPLATE_NOT_FOUNDüö´', alerts[alert_id][1])
        except Exception as ex:
            await update_status(alerts[alert_id], 'üõ†HTTP_ERRORüõ†', alerts[alert_id][1], error=ex)
        alert_id += 1
    t2 = time.time()
    update_time = t2 - t1



async def updater():
    while True:
        await update_alerts()
        await asyncio.sleep(5)

async def on_startup(x):
    global pool
    pool = await asyncpg.create_pool(DATABASE_URL)
    db = await asyncpg.connect(DATABASE_URL)

    await db.execute('''CREATE TABLE IF NOT EXISTS ALERTS(
                    id serial PRIMARY KEY,
                    chat_id INTEGER,
                    name TEXT,
                    address TEXT,
                    template TEXT,
                    status TEXT,
                    latest_error TEXT
                    )''')
    await db.execute('''CREATE TABLE IF NOT EXISTS PAYMENTS(
                    chat_id serial PRIMARY KEY,
                    ts INTEGER,
                    amount INTEGER
                    )''')
    await db.close()
    asyncio.create_task(updater())


async def get_payment_ts(chat_id):
    db = await asyncpg.connect(DATABASE_URL)
    users = await db.fetch('''SELECT ts FROM PAYMENTS WHERE chat_id=$1''', *[chat_id, ])
    await db.close()
    if not users:
        return 0
    return max([users[i][0] for i in range(len(users))])


async def add_payment(chat_id, amount=100):
    db = await asyncpg.connect(DATABASE_URL)
    await db.execute('''INSERT INTO PAYMENTS(chat_id, ts, amount) VALUES($1,$2,$3)''', *[chat_id, int(time.time()), amount])
    await db.close()


async def add(chat_id, name, address, template):
    db = await asyncpg.connect(DATABASE_URL)
    await db.execute('''INSERT INTO ALERTS(chat_id, name, address, template, status) VALUES($1,$2,$3,$4,$5)''', *[chat_id, name, address, template, '‚è≥NS‚è≥'])
    await db.close()


async def delete(chat_id, name):
    db = await asyncpg.connect(DATABASE_URL)
    await db.execute('''DELETE FROM ALERTS WHERE chat_id=$1 AND name=$2''', *[chat_id, name])
    await db.close()


async def status(chat_id):
    db = await asyncpg.connect(DATABASE_URL)
    alerts = await db.fetch('''SELECT status, name, address, template, latest_error FROM ALERTS WHERE chat_id=$1''', *[chat_id, ])
    await db.close()
    return alerts


def parse_args(message):
    splitted = message.text.split()
    return splitted[1:]


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply('''‚ÄºÔ∏è‚ÄºÔ∏è –ü—Ä–∏–≤–µ—Ç! ‚ÄºÔ∏è‚ÄºÔ∏è\n
–Ø –º–æ–Ω–∏—Ç–æ—Ä—é —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–±–æ–π –≤–µ–± —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –∫—É—Å–∫–æ–≤ HTML.
–ù–∞–ø—Ä–∏–º–µ—Ä, —à–∞–±–ª–æ–Ω–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Å–µ—Ä—ã–π —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å" –Ω–∞ —Ç–≤–æ–µ–º –ª—é–±–∏–º–æ–º —Å–∞–π—Ç–µ, –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.
(–ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–∫–æ–º —Å HTML - –ø—Ä–æ—Å—Ç–æ —Ç—ã–∫–Ω–∏ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –Ω–∞–∂–º–∏ Inspect element source code, —Ç–∞–º –±—É–¥—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–∫—Ç–∞)
–£ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å–æ–≤: ‚úÖTEMPLATE_FOUND‚úÖ, üö´TEMPLATE_NOT_FOUNDüö´, üõ†HTTP_ERRORüõ†.
–¢—ã –±—É–¥–µ—à—å —Ç—É—Ç –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω (–º–∞–∫—Å. 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏) –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö, –∫—Ä–æ–º–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ HTTP_ERROR (–õ—é–±–æ–π —Å–∞–π—Ç –∏–Ω–æ–≥–¥–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –¥–æ–ª—é –∑–∞–ø—Ä–æ—Å–æ–≤) - –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /status.

–ü—Ä–∏–º–µ—Ä—ã:
 –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:   /add AlertName https://www.alert-example-shop.ru/ http_template
 –£–¥–∞–ª–µ–Ω–∏–µ   –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:   /delete AlertName
 –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:   /status
 –ü–æ–º–æ—â—å                :   /help

–ù–∞–¥–µ—é—Å—å –±–æ—Ç –±—É–¥–µ—Ç —Ç–µ–±–µ –ø–æ–ª–µ–∑–µ–Ω!''')


@dp.message_handler(commands=['status'])
async def send_status(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    st = await status(message.chat.id)
    html = '–†–∞–±–æ—Ç–∞–µ–ºüí™üí™ –¢–µ–∫—É—â–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {} —Å–µ–∫—É–Ω–¥\n\n–¢–≤–æ–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏:\n\n'.format(update_time + 5)
    html += '<pre>\n| ' + ' | '.join(['–°—Ç–∞—Ç—É—Å','–ù–∞–∑–≤–∞–Ω–∏–µ','–ê–¥—Ä–µ—Å','–®–∞–±–ª–æ–Ω','–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞']) + ' |\n'
    for row in st:
        html += '| ' + ' | '.join([str(i) for i in row]) + ' |\n'
    html += '</pre>'
    await message.reply(html, parse_mode='HTML')


@dp.message_handler(commands=['add'])
async def add_alert(message: types.Message):
    n_in_use = len(await status(message.chat.id))
    last_pay = await get_payment_ts(message.chat.id)
    if int(time.time()) - last_pay >= 30 * 24 * 60 * 60 and n_in_use >= 2:
        await message.reply("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –≤—Å–µ–≥–æ –∑–∞ 100—Ä –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤: /buy")
        return
    """
    This handler will be called when user sends `/start` or `/help` command
    """

    args = parse_args(message)
    try:
        assert len(args) == 3
        assert len(args[0]) < 200
        assert len(args[1]) < 200
        assert len(args[2]) < 200
        assert args[1].startswith('http')
    except:
        await message.reply("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∑–≤–µ—Ä–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.\n–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç:\n\n/add alert_name http_address http_template")
        return

    await add(message.chat.id, *args)

    await message.reply("–£—Å–ø–µ—Ö.")


@dp.message_handler(commands=['delete'])
async def delete_alert(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    args = parse_args(message)
    try:
        assert len(args) == 1
        assert len(args[0]) < 200
    except:
        await message.reply("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∑–≤–µ—Ä–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.\n–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç:\n\n/delete alert_name")
        return

    await delete(message.chat.id, *args)
    await message.reply("–£—Å–ø–µ—Ö.")


@dp.message_handler(commands=['buy'])
async def cmd_buy(message: types.Message):
    await bot.send_invoice(message.chat.id, title='–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü',
                           description='–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤',
                           provider_token=PAYMENTS_PROVIDER_TOKEN,
                           currency='rub',
                           is_flexible=False,  # True If you need to set up Shipping Fee
                           prices=prices,
                           start_parameter='time-machine-example',
                           payload='{}'.format(message.chat.id))


@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                        error_message="Aliens tried to steal your card's CVV,"
                                                      " but we successfully protected your credentials,"
                                                      " try to pay again in a few minutes, we need a small rest.")


@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT)
async def got_payment(message: types.Message):
    await add_payment(message.chat.id)
    await bot.send_message(message.chat.id,
                           '–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ —Å–æ—Ç–Ω–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤.',
                           parse_mode='Markdown')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)